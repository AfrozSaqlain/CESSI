import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = [16,12]
plt.rcParams.update({'font.size':18})

# Create a simple signal with two frequencies

dt = 0.001
t = np.arange(0,1,dt)
f = np.sin(2*np.pi*50*t) + np.sin(2*np.pi*120*t)
f_clean = f
f = f + 2.5*np.random.randn(len(t))


# Compute the fft

n = len(t)
fhat = np.fft.fft(f,n)                          # Compute the fft (the fhat vector is such that the magnitude tells us how much important that frequency is and the phase tells us if its more sine or cosine)
PSD = fhat * np.conj(fhat) / n                  # Power spectrum density (Power per frequency)
freq = (1/(dt*n)) * np.arange(n)                # Create x-axis of frequencies
L = np.arange(1,np.floor(n/2), dtype='int')     # Only plot the first half of 

'''
To filter the data we will keep the 
Fourier Coefficient which is larger than a 
threshold and make all other go to zero
'''

# Use the PSD to filter out noise

indices = PSD > 100         # Find all frequencies with large power
PSDclean = PSD * indices    # Zero out all others
fhat = indices * fhat       # Zero out small Fourier coefficients in Y
ffilt = np.fft.ifft(fhat)   # Inverse FFT for filtered time signal



# Plotting

fig,axs = plt.subplots(3,1)

plt.sca(axs[0])
plt.plot(t,f,color='c', LineWidth=1.5,label='Noisy')
plt.plot(t,f_clean,color='k', LineWidth=2,label='Clean')
plt.xlim(t[0],t[-1])
plt.legend()


plt.sca(axs[1])
plt.plot(t,ffilt,color='k', LineWidth=2,label='Filtered')
plt.xlim(t[0],t[-1])
plt.legend()


plt.sca(axs[2])
plt.plot(freq[L],PSD[L],color='c', LineWidth=2,label='Noisy')
# plt.plot(freq[L],PSDclean[L],color='k', LineWidth=1.5,label='Filtered')
plt.xlim(freq[L[0]],freq[L[-1]])
plt.legend()

plt.show()
